A database index is a data structure that improves the speed of data retrieval 
operations on a database table at the cost of additional writes and storage space to 
maintain the index data structure. Indexes are used to quickly locate data without 
having to search every row in a database table every time a database table is accessed.
Indexes can be created using one or more columns of a database table, providing the 
basis for both rapid random lookups and efficient access of ordered records. An index 
is a copy of select columns of data from a table that can be searched very efficiently 
that also includes a low-level disk block address or direct link to the complete row of 
data it was copied from.

With a clustered index the rows are stored physically on the disk in the same order as 
the index. There can therefore be only one clustered index.With a non clustered index 
there is a second list that has pointers to the physical rows. You can have many non 
clustered indexes, although each new index will increase the time it takes to write 
new records.It is generally faster to read from a clustered index if you want to get 
back all the columns. You do not have to go first to the index and then to the table.
Writing to a table with a clustered index can be slower, if there is a need to rearrange
the data.

A B-tree is a tree data structure that keeps data sorted and allows searches, 
sequential access, insertions, and deletions in logarithmic time. The B-tree is a 
generalization of a binary search tree in that a node can have more than two children. 
Unlike self-balancing binary search trees, the B-tree is optimized for systems that 
read and write large blocks of data. B-trees are a good example of a data structure 
for external memory.

A columnstore index is a type of data structure that's used to store, manage and 
retrieve data that is stored in a columnar-style database. Columnstore indexes work 
well with read-only queries and large-scale analysis. One of their primary uses is 
queries for data warehousing. Columnstore indexes come with certain benefits over their 
row store counterparts; they can achieve higher compression rates and reduce I/O from 
physical media. Columnstore indexes come in two varieties -- clustered and non-clustered. 
Clustered columnstore indexes are updateable and are always the primary storage method 
for their entire table. They cannot be combined with other indexes and they do not 
physically store columns in a particular order. Non-clustered columnstore indexes can 
index subsets of columns. They require extra storage to store a copy of a column in the 
index and are updated by rebuilding or partitioning the index. Non-clustered 
columnstores can be combined with other tables and physically store columns in a 
particular order to optimize compression. 

In text retrieval, full text search refers to techniques for searching a single 
computer-stored document or a collection in a full text database. Full-text search is 
distinguished from searches based on metadata or on parts of the original texts 
represented in databases (such as titles, abstracts, selected sections, or 
bibliographical references). In a full-text search, a search engine examines all of 
the words in every stored document as it tries to match search criteria for example 
(text specified by a user).

A spatial index is a type of extended index that allows you to index a spatial column.
A spatial column is a table column that contains data of a spatial data type, such 
as geometry or geography.
 
Advantages: use an index for quick access to a database table specific information. 
The index is a structure of the database table the value of one or more columns to 
sort. As a general rule, only when the data in the index column Frequent queries, 
only need to create an index on the table. The index take up disk space and reduce to 
add, delete, and update the line speed. In most cases, the speed advantages of 
indexes for data retrieval greatly exceeds it. 

Disadvantages: too index will affect the speed of update and insert, because it 
requires the same update each index file. For a frequently updated and inserted into 
the table, there is no need for a rarely used where the words indexed separately, 
small table, the cost of sorting will not be great, there is no need to create 
additional indexes. In some cases, the indexing words may not be fast, for example, 
the index is placed in a contiguous memory space, which will increase the burden of 
disk read, which is optimal, it should be through the actual use of the environment 
to be tested.